#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app   = require('../app');
var debug = require('debug')('myapp:server');
var http  = require('http');
var mraa  = require('mraa');

console.log('MRAA Version: ' + mraa.getVersion());
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//intel edison
u = new mraa.Uart(0);
var serialPath = u.getDevicePath();
var SerialPort = require("serialport");
var serialPort = new SerialPort(serialPath, {
    baudrate: 38400
});
serialPort.on("open",function() {
    console.log("open");
    console.log("Connected to "+serialPath);
    serialPort.on("data", function(data) { //Read available data from serial port
        console.log("data received: " + data);
    });

    var SerialWriteFunc = function() {
      serialPort.write(':780135' + 'X\r\n', function(err, results) { //Write data
          console.log("err " + err);
          console.log("results " + results);
      });
      setTimeout(SerialWriteFunc, 1000);
    }
    SerialWriteFunc();
});


var ledState = false;
var EdisonFunc = function(){

}

//socket.IO
io.on('connection', function (socket) {
  socket.emit('start', { massage: 'websocket started!!' });
  socket.on('send_c_to_s', function (data) {
    console.log(data);
    if(data == '1ds11176w@gmail.com') {
      ledState = true;
      EdisonFunc();
    } else {
      ledState = false;
      EdisonFunc();
    }
  });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
