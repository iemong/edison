#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app   = require('../app');
var debug = require('debug')('myapp:server');
var http  = require('http');
var mraa  = require('mraa');

console.log('MRAA Version: ' + mraa.getVersion());
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//counter
var second = 3;
//intel edison
u = new mraa.Uart(0);
var serialPath = u.getDevicePath();
var SerialPort = require("serialport");
var serialPort = new SerialPort(serialPath, {
    baudrate: 38400
});
serialPort.on("open",function() {
    console.log("open");
    console.log("Connected to "+serialPath);
    serialPort.on("data", function(data) { //Read available data from serial port
        console.log("data received: " + data);
    });
});

function SerialWriteFunc (_num, _r, _g, _b) {
  var list = [_num, _r, _g, _b];
  //convert num -> HEX
  for (var i = 0; i < list.length; i++) {
    list[i] = list[i].toString(16).toUpperCase();
    if(list[i].length == 1) {
    list[i] = '0' + list[i];
    }
  }
  serialPort.write(':7801'+ list[0] + list[1] + list[2] + list[3] + 'X\r\n', function(err, results) { //Write data
    if(err !== null || results !== undefined) {
      console.log("err " + err);
      console.log("results " + results);
    }
  });
}
var smokeState = false;
var EdisonFunc = function(){
  if (smokeState) {
    SerialWriteFunc(1, 170, 255, 120);
    setTimeout(function(){
      SerialWriteFunc(0, 170, 255, 120);
      smokeState = false;
    }, second * 1000);
  } else {
    SerialWriteFunc(0, 170, 255, 120);
  }
};

//socket.IO
io.on('connection', function (socket) {
  socket.emit('start', { massage: 'websocket started!!' });
  socket.on('send_c_to_s', function (data) {
    console.log(data);
    if(data.message == '1ds11176w@gmail.com') {
      smokeState = true;
      EdisonFunc();
    } else {
      smokeState = false;
      EdisonFunc();
    }
  });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
